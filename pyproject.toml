# CodeReviewer Pro - Project Configuration
# Python packaging and development tools configuration

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "codereviewer-pro"
version = "1.0.0"
description = "AI-powered code review and analysis platform using GPT-OSS-20b with LoRA fine-tuning"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["ai", "code-review", "machine-learning", "fastapi", "gpt", "lora", "cuda"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Framework :: FastAPI",
    "Environment :: GPU :: NVIDIA CUDA",
]

dependencies = [
    "torch>=2.0.1",
    "transformers>=4.33.2",
    "peft>=0.5.0",
    "accelerate>=0.23.0",
    "fastapi>=0.103.1",
    "uvicorn[standard]>=0.23.2",
    "pydantic>=2.4.2",
    "sqlalchemy>=2.0.21",
    "alembic>=1.12.0",
    "asyncpg>=0.28.4",
    "redis>=5.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.2",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
    "black>=23.9.1",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.1",
    "pre-commit>=3.4.0",
    "jupyter>=1.0.0",
    "ipywidgets>=8.1.1",
]
ml = [
    "datasets>=2.14.5",
    "tokenizers>=0.13.3",
    "huggingface-hub>=0.17.3",
    "safetensors>=0.3.3",
    "bitsandbytes>=0.41.1",
    "matplotlib>=3.7.2",
    "seaborn>=0.12.2",
    "pandas>=2.1.1",
    "numpy>=1.25.2",
    "scikit-learn>=1.3.0",
]
monitoring = [
    "prometheus-client>=0.17.1",
    "structlog>=23.1.0",
    "sentry-sdk>=1.32.0",
    "opencensus-ext-prometheus>=0.8.0",
]
production = [
    "gunicorn>=21.2.0",
    "supervisor>=4.2.5",
    "psutil>=5.9.5",
]

[project.urls]
Homepage = "https://github.com/yourusername/codereviewer-pro"
Documentation = "https://codereviewer-pro.readthedocs.io/"
Repository = "https://github.com/yourusername/codereviewer-pro.git"
Issues = "https://github.com/yourusername/codereviewer-pro/issues"

[project.scripts]
codereviewer = "app.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "httpx",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=app --cov-report=html --cov-report=term {args:tests}"
lint = "flake8 app tests"
format = "black app tests && isort app tests"
type-check = "mypy app"

# =============================================================================
# BLACK - Code Formatting
# =============================================================================
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# =============================================================================
# ISORT - Import Sorting
# =============================================================================
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["app", "tests"]
skip_glob = ["**/migrations/*.py"]
known_first_party = ["app"]
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "alembic",
    "redis",
    "torch",
    "transformers",
    "accelerate",
    "peft",
]

# =============================================================================
# FLAKE8 - Linting
# =============================================================================
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "F401",  # imported but unused (handled by isort)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
    "migrations",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,D100,D101,D102,D103,D104",
]

# =============================================================================
# MYPY - Type Checking
# =============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Paths and modules
files = ["app", "tests"]
exclude = ["migrations/"]

# Third-party imports
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "accelerate.*",
    "peft.*",
    "datasets.*",
    "redis.*",
    "prometheus_client.*",
    "sqlalchemy.*",
]
ignore_missing_imports = true

# =============================================================================
# PYTEST - Testing
# =============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "ml: marks tests related to machine learning",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# =============================================================================
# COVERAGE - Test Coverage
# =============================================================================
[tool.coverage.run]
source = ["app"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "app/main.py",  # Startup file, hard to test
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

# =============================================================================
# BANDIT - Security Linting
# =============================================================================
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert statements and shell injection (controlled usage)

# =============================================================================
# PRE-COMMIT - Git Hooks
# =============================================================================
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            "trailing-whitespace",
            "end-of-file-fixer",
            "check-yaml",
            "check-added-large-files",
            "check-json",
            "check-toml",
            "check-merge-conflict",
            "debug-statements",
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.9.1",
        hooks = ["black"]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = ["isort"]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.1.0",
        hooks = ["flake8"]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.6.1",
        hooks = ["mypy"]
    },
]

# =============================================================================
# RUFF - Fast Python Linter (Alternative to Flake8)
# =============================================================================
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (we'll handle this case by case)
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

# =============================================================================
# SEMANTIC RELEASE - Automated Versioning
# =============================================================================
[tool.semantic_release]
version_variable = "app/__init__.py:__version__"
build_command = "pip install build && python -m build"
dist_path = "dist/"
remove_dist = false