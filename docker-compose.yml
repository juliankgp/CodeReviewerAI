# CodeReviewer Pro - Docker Compose Configuration
# Development environment with PostgreSQL, Redis, and ML services

version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: codereviewer-app
    ports:
      - "8000:8000"    # FastAPI
      - "8888:8888"    # Jupyter Lab
      - "6006:6006"    # TensorBoard
      - "5678:5678"    # Debugpy
    volumes:
      - .:/app
      - ml_models:/app/ml/models
      - app_logs:/app/logs
    environment:
      - DATABASE_URL=postgresql+asyncpg://codereviewer:codereviewer123@postgres:5432/codereviewer
      - REDIS_URL=redis://redis:6379/0
      - CUDA_VISIBLE_DEVICES=0
      - ENABLE_JUPYTER=true
      - ENABLE_TENSORBOARD=true
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - codereviewer-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: codereviewer-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: codereviewer
      POSTGRES_USER: codereviewer
      POSTGRES_PASSWORD: codereviewer123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codereviewer -d codereviewer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - codereviewer-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: codereviewer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - codereviewer-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: codereviewer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - codereviewer-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: codereviewer-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - codereviewer-network

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: codereviewer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - codereviewer-network

  # MinIO for local S3-compatible storage (optional)
  minio:
    image: minio/minio:latest
    container_name: codereviewer-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - codereviewer-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

networks:
  codereviewer-network:
    driver: bridge

# Development commands:
# docker-compose up -d                    # Start all services
# docker-compose up app postgres redis    # Start core services only
# docker-compose logs -f app              # Follow app logs
# docker-compose exec app bash            # Access app container
# docker-compose exec postgres psql -U codereviewer -d codereviewer  # Access database
# docker-compose down                     # Stop all services
# docker-compose down -v                  # Stop and remove volumes